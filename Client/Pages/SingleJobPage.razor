@page "/job/{custid:int}"
@page "/job/{jobid:int}/{custid:int}"
@inject IJobService JobService

@if (JobId == null)
{
    <PageTitle>Create a new job</PageTitle>
    <h3>Create a new job</h3>
}
else
{
    <PageTitle>Edit @job.JobTitle</PageTitle>
    <h3>Edit @job.JobTitle</h3>
}

<EditForm Model="job" OnSubmit="HandleSubmit">
    <div>
        <label for="jobtitle">Job Title</label>
        <InputText id="jobtitle" @bind-Value="job.JobTitle" class="form-control"></InputText>
    </div>
    <div>
        <label for="startdate">Start Date</label>
        <InputDate id="startdate" @bind-Value="job.StartDate" class="form-control"></InputDate>
    </div>
    <br />
    <div>
        <button type="submit" class="btn btn-primary">@btnText</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteJob">Delete Job</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public int CustId { get; set; }

    [Parameter]
    public int? JobId { get; set; }

    Job job = new Job
        {
            StartDate = DateTime.Today
        };

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = JobId == null ? "Save New Job" : "Update Job";
        await JobService.GetJobs();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (JobId == null)
        {

        }
        else
        {
            job = await JobService.GetSingleJob((int)JobId);
        }
    }

    async Task HandleSubmit()
    {
        if (JobId == null)
        {
            await JobService.CreateJob(job, CustId);
        }
        else
        {
            await JobService.UpdateJob(job);
        }
    }

    async Task DeleteJob()
    {
        await JobService.DeleteJob(job.ID);
    }
}
