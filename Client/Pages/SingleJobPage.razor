@page "/job/{custid:int}"
@page "/job/{custid:int}/{jobid:int}"
@inject IJobService JobService
@inject IPartService PartService

@if (JobId == null)
{
    <PageTitle>Create a new job</PageTitle>
    <h3>Create a new job</h3>
}
else
{
    <PageTitle>Edit @job.JobTitle</PageTitle>
    <h3>Edit @job.JobTitle</h3>
}


<div style="margin-bottom: 100px;">
<EditForm Model="job" OnSubmit="HandleSubmit">
    <div>
        <label for="jobtitle">Job Title</label>
        <InputText id="jobtitle" @bind-Value="job.JobTitle" class="form-control"></InputText>
    </div>
    <div>
        <label for="startdate">Start Date</label>
        <InputDate id="startdate" @bind-Value="job.StartDate" class="form-control"></InputDate>
    </div>
    <div class="mt-3">
        <div class="form-check">
            <InputCheckbox id="completed" @bind-Value="job.IsCompleted" class="form-check-input"></InputCheckbox>
            <label class="form-check-label" for="completed">Job Completed</label>
        </div>
    </div>

    @if (job.IsCompleted)
    {
        <div class="mt-3">
            <label for="finishdate">Finish Date</label>
            <InputDate id="finishdate" @bind-Value="job.FinishDate" class="form-control"></InputDate>
        </div>
        <div>
            <label for="totalhours">Total Hours</label>
            <InputNumber id="totalhours" @bind-Value="job.TotalHours" class="form-control"></InputNumber>
        </div>
    }
    <br />
    <div>
        <button type="submit" class="btn btn-primary">@btnText</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteJob">Delete Job</button>
    </div>
</EditForm>
</div>

@if (JobId != null)
{
    @if (showPartTable)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Part Name</th>
                    <th>Cost (£)</th>
                    <th> </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var part in PartService.Parts)
                {
                    <tr>
                        <td>@part.Name</td>
                        <td>@part.Cost</td>
                        <td><button class="trash-button" @onclick="() => DeletePart(part.ID)">
                                <span class="trash-icon">&#128465;</span> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <p>Total Parts Cost: @TotalPartsCost (£)</p>
    }
    @if (!showPartForm)
    {
        <div class="mb-4">
            <button class="btn btn-primary" @onclick="ShowPartForm">Create Part</button>
        </div>
    }
    else
    {
        <div class="mt-4">
            <h4>Create New Part</h4>
            <div class="form-group">
                <label for="partName">Part Name</label>
                <input type="text" class="form-control" id="partName" @bind="part.Name" />
            </div>
            <div class="form-group">
                <label for="partCost">Cost (£)</label>
                <input type="number" class="form-control" id="partCost" @bind="part.Cost" />
            </div>
            <div class="mt-4">
                <button class="btn btn-primary" @onclick="CreateNewPart">Save Part</button>
                <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    }
}


@code {
    [Parameter]
    public int CustId { get; set; }

    [Parameter]
    public int? JobId { get; set; }

    Job job = new Job
    {
        StartDate = DateTime.Today
    };

    Part part = new Part();

    bool showPartForm = false;
    bool showPartTable = true;

    double TotalPartsCost => PartService.Parts.Sum(part => part.Cost);

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = JobId == null ? "Save New Job" : "Update Job";
        await JobService.GetJobs();
        await PartService.GetJobParts((int)JobId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (JobId == null)
        {

        }
        else
        {
            job = await JobService.GetSingleJob((int)JobId);
        }
    }

    async Task HandleSubmit()
    {
        if (JobId == null)
        {
            await JobService.CreateJob(job, CustId);
        }
        else
        {
            await JobService.UpdateJob(job);
        }
    }

    async Task DeleteJob()
    {
        await JobService.DeleteJob(job.ID);
    }

    void ShowPartForm()
    {
        showPartForm = true;
    }

    void Cancel()
    {
        showPartForm = false;
    }

    async Task CreateNewPart()
    {
        await PartService.CreatePart(part, (int)JobId);
        await PartService.GetJobParts((int)JobId);
        part = new Part();
        showPartForm = false;
        showPartTable = true;
    }

    async Task DeletePart(int id)
    {
        await PartService.DeletePart(id);
        await PartService.GetJobParts((int)JobId);
    }
}
